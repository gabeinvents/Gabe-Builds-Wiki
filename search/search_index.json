{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"Welcome to my Wiki","tags":["home"]},{"location":"#documentation","title":"Documentation","text":"<p>This wiki provides documentation on the DRV8825 stepper motor driver breakout board by providing:</p> <ul> <li>Tutorials</li> <li>Wiring Diagrams</li> <li>Examples</li> <li>Material Lists</li> <li>And more!</li> </ul>","tags":["home"]},{"location":"#store","title":"Store","text":"<p>The DRV8825 stepper motor driver is available for purchase on my Tindie store, linked here</p>","tags":["home"]},{"location":"#about","title":"About","text":"<p>I am a Mechanical Engineer from the US that spends my free time either gardening or making Arduino projects. I created the DRV8825 Stepper Motor Driver Breakout Board out of frustration when trying to use the DRV8825 drivers on a breadboard for a CNC project I was working on. My breadboard was a spiderweb of wires and components, making it difficult to try different setups of the drivers. Once I had the boards made, I figured others may also share my frustration and be interested in this board.</p>","tags":["home"]},{"location":"store/","title":"Gabe Builds Store","text":"<p>Products featured on this wiki are sold on my Tindie Store linked below:</p> <p></p>","tags":["Store","Tindie"]},{"location":"DRV8825%20Breakout%20Board/Cloning%20Inputs/","title":"Cloning Inputs","text":"<p> Go Back To Microstepping</p> <p>Go Back To Introduction </p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Cloning%20Inputs/#cloning-inputs","title":"Cloning Inputs","text":"<p>You may have an application where you have two motors working together where they are moving at the same speed and direction, simultaneously. A method to achieve this is by sending the same input signals to the same two drivers.</p> <p>The breakout board is equiped with a 3-position switches that allows you to connect the <code>STP</code>, <code>DIR</code>, and <code>EN</code> pins from one drive to the other, reducing the number of connections you would need to make from the Arduino to the board.</p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Cloning%20Inputs/#cloned-input-example","title":"Cloned input example","text":"","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Cloning%20Inputs/#pin-connections","title":"Pin Connections","text":"<p>Prepare the breakout board with two motors and two drivers with the current limit already set. You only need to connect one set of <code>DIR</code> and <code>STP</code> pins to the board.Set all the clone input switches to the <code>ON</code> position.</p> <p>Make sure the microstep configuration is set to full-step (or at least the same setup) so that they turn the same amount of steps</p> Final pin connections to run the quick start code","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Cloning%20Inputs/#code","title":"Code","text":"<p>Copy the code from quick-start example and run it. The stepper motors should turn simulataneously at the same speed and position.</p> <p> Go Back To Microstepping</p> <p>Go Back To Introduction </p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Introduction/","title":"Introduction","text":"<p> Go Back To Home</p> <p>Go Next To Quick Start </p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Introduction/#introduction","title":"Introduction","text":"<p>The DRV8825 is a specialized stepper motor driver that offers a straightforward, reliable, and precise way to control a stepper motor with a microcontroller like an Arduino. These qualities make the DRV8825 an ideal solution for applications requiring precise motion control, such as CNC machines, 3D printers, automation, and more.</p> DRV8825 stepper motor driver and breakout board <p>To further simplify the use of these drivers, the DRV8825 Breakout Board by Gabe Builds allows for easy connection, setup, and operation of the DRV8825 stepper motor drivers without the need for a breadboard.</p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Introduction/#about-drv8825","title":"About DRV8825","text":"<p>The DRV8825 chip is a stepper motor driver manufactured by Texas Instruments, designed to control bipolar stepper motors.</p> <p>Key features of the DRV8825 include:</p> <ul> <li>Output motor capacity of up to 45V and 2.5A per coil</li> <li>Reduces noise from the stepper motors.</li> <li>Control pins are simplified to two pins: step and direction</li> <li>Six micro stepping resolutions: full-step, \u00bd-step, \u00bc-step, 1/8-step, 1/16-step, and 1/32-step</li> <li>Under-voltage, shoot-through, short circuit, overcurrent, and thermal protections</li> </ul> <p>More information can be found on Texas Intsrument's DRV8825 Datasheet:</p> <p>DRV8825 Datasheet  </p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Introduction/#about-the-breakout-board","title":"About the Breakout Board","text":"<p>The DRV8825 drivers readily available on the internet built to be used on a breadboard. These drivers require quite a few extra components and wire connections for prototyping, creating a spider web of wires on the breadboard. This is especially true when working with multiple stepper motor drivers.</p> <p>The Advantages of using a breakout board includes:</p> <ul> <li>Clearly labeled pin connections</li> <li>Switches that simplify microstep resolution configuration and cloning control inputs, reducing extra wires</li> <li>A built-in 100\u03bcF decoupling capacitor that reduces voltage spikes in the motor input</li> </ul>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Introduction/#pin-overview","title":"Pin Overview","text":"<p>Place a DRV8825 stepper driver module on the breakout board. Make sure that the pins of the module match the pins of the breakout board</p> DRV8825 Breakout board with and without the motor drivers","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Introduction/#motor-power-connections","title":"Motor Power Connections","text":"<p><code>VMOT</code> and <code>GMOT</code> are motor input voltage and motor ground, respectively. These power connections supply power to the motor and can have a voltage between 8.2V and 45V. Make sure to pick a power supply that can provide enough current to the motor(s) you power with it.</p> <p>The motor power connections supplies power to all  the DRV8825 drivers placed on the board.</p> Motor Power Connections","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Introduction/#input-control-pins","title":"Input Control Pins","text":"<p><code>STP</code> and <code>DIR</code> are the input controls step and direction, respectively.</p> <ul> <li>Every time a HIGH pulse is sent to the step pin moves the motor by one step. The faster the step pin is pulsed, the faster the motor spins.</li> <li>Toggling of the direction pin changes the direction of the stepper motor.</li> </ul> Input Control Pins","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Introduction/#motor-to-driver-connections","title":"Motor to Driver Connections","text":"<p>Pins <code>B2</code>, <code>B1</code>, <code>A1</code>, and <code>A2</code> are the motor connection for a Bi-polar stepper motor. </p> <ul> <li>One coil of the stepper motor should be connected to <code>B2</code> and <code>B1</code>, and the other to <code>A1</code> and <code>A2</code></li> <li>Most stepper motors have connectors that are setup to match this configuration. If not, you can verify which motor wire connections are on the same coil by refering to the manufactuer's datasheet or by using the continuity setting on a multimeter.</li> </ul> Driver to Motor Pins","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Introduction/#enable-pins","title":"Enable Pins","text":"<p>The Enable pin, or <code>EN</code>, are pins that disable or enable the motor driver to turn the stepper motor. Setting the enable pin HIGH disables the motor, while setting the enable pin LOW disables the motor.</p> Enable Pins","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Introduction/#fault-pins","title":"Fault Pins","text":"<p>The fault pins, or <code>FLT</code>, is a pin that returns LOW to the microcontroller when the driver is disabled due to over-current protection or thermal shutdown.</p> Fault Pins","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Introduction/#microstepping-switch","title":"Microstepping Switch","text":"<p>The breakout board has a switch, <code>M0</code>, <code>M1</code>, and <code>M2</code> that allows you to change the resolution of the stepper motor to move to more precise positions</p> Microstep configuration switches <p>More on microstepping can be found here.</p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Introduction/#clone-input-switch","title":"Clone Input Switch","text":"<p>The breakout board contains a 3-position dip switch that allows you to connect the control pins of one driver to the other. This allows two motors to recieve the same inputs from a microncontroller and work together simultaneously.</p> Clone inputs switche <p>More on cloning inputs can be found here</p> <p> Go Back To Home</p> <p>Go Next To Quick Start </p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Quick%20Start/","title":"Quick Start","text":"<p> Go Back To Introduction</p> <p>Go Next To Libraries </p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Quick%20Start/#quick-start","title":"Quick Start","text":"<p>To setup and test the DRV8825 stepper driver breakout board, follow the guide below.</p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Quick%20Start/#equipment","title":"Equipment","text":"<p>You will need the following equipment:</p> <ul> <li>A DRV8825 driver module</li> <li>A DRV8825 Breakout Board</li> <li>A stepper motor</li> <li>An Arduino</li> <li>Prototype pin wire connections</li> <li>A multimeter</li> <li>Alligator clips</li> <li>A screwdriver that fits the potentiometer on the DRV8825 driver module.</li> <li>An external power source for the stepper motor. Voltage must match the stepper motor and can supply enough current to the driver/stepper motor.</li> </ul> You will need the equipment pictured above","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Quick%20Start/#initial-pin-setup","title":"Initial Pin Setup","text":"<p>Warning</p> <p>Disconnect power from the Arduino board and motor power supply when adding or removing pins to avoid damage to the electronics.</p> <p>Once you have all the quipment listed above, you can start setting up the pin connectins</p> <p>Place a single DRV8825 stepper motor driver on the breakout board. Make sure the pins of the DRV8825 module match that of the breakout board. Connect the breakout board to Arduino microcontroller</p> <ul> <li>Connect VMOT and GMOT (Ground) to your motor power source.</li> <li>Connect your stepper motor to pins \"B2\", \"B1\", \"A2\", and \"A1\"</li> <li>Connect VCC to the 5V on to the Arduino.</li> <li>Connect one of two GND pins on the breakout board to the Arduino</li> <li>Switch the microstep switches and clone input switches to the OFF position</li> <li>The FLT and EN pins aren't used in this example</li> </ul> Initial Pin Setup Connections","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Quick%20Start/#current-limiting","title":"Current Limiting","text":"<p>Before we can start using the DRV8825, the current limit needs to be set.</p> <p>First calculate a voltage reference by dividing the current limit of the motor by two. For example, if a stepper motor has a current limit of 2A, the reference voltage would be 1V</p> \\[ V_{Ref} = \\frac{\\text{motor current limit}}{2} \\] <ul> <li>Connect the STP and DIR pin on the breakout board to the 5V on the Arduino</li> <li>Turn on the motor power supply</li> <li>Take a multimeter grund probe and connect it to the extra ground in on the DRV8825 breakout board</li> <li>Take a voltage probe and connect it to a conductive screwdriver using an alligator clip</li> <li>Set the multimeter of the DC voltage setting and turn the potentiometer of the DRV8825 until the voltage on the multimeter matches the reference voltage.</li> </ul> Current Limiting Setup <p>Once the current limit is set, remove the multimeter and the 5V from the step and direct pin.</p> <p>Info</p> <p>Current limiting must be completed anytime a stepper motor or driver is changed.</p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/Quick%20Start/#arduino-code","title":"Arduino Code","text":"<p>With the current limit now set, remove the 5V from the STP and DIR pin on the breakout board and connect the pins to the Arduino pins 2 &amp; 3, respectively.</p> Final pin connections to run the quick start code <p>Copy the code below and paste it into the Arduino IDE and upload it to the Arduino.</p> <p>Read the comments that explains what the code is doing.</p> <p>The motor should slowly turn one direction, stop, turn faster the other direction, stop and repeat the process.</p> <p>Once complete, you have started your journey of mastering the DRV8825 stepper driver.</p> <pre><code>// ==========================================\n//              Pin Connections\n// ==========================================\n\nconst int DIR_pin = 2;  // direction pin = Changes the direction the stepper motor turns\nconst int STP_pin = 3;  // step pin = every time the step pin is pulsed, it turns 1 step\nconst int steps_per_revolution = 200;\n\n// ==========================================\n//               SETUP CODE\n// ==========================================\nvoid setup(){\n    // Set the DIR_pin and STP_pin as outputs\n    pinMode(DIR_pin, OUTPUT);\n    pinMode(STP_pin, OUTPUT);\n} // End of setup loop\n\n// ==========================================\n//               MAIN LOOP CODE\n// ==========================================\nvoid loop(){\n    // Set motor direction HIGH\n    digitalWrite(DIR_pin, HIGH);\n\n    // Spin motor slowly\n    for(int x = 0; x &lt; steps_per_revolution; x++){\n        digitalWrite(STP_pin, HIGH);  // Pulse step pin HIGH to move to next step\n        delayMicroseconds(4000);  // Small delay before turning step pin LOW\n        digitalWrite(STP_pin, LOW); // Pulse the step pin LOW\n        delayMicroseconds(4000);  // Small delay\n    }\n    delay(1000); // 1 second delay, no movement\n\n  // Sets motor direction LOW, changing the motor direction\n    digitalWrite(DIR_pin, LOW);\n\n    // Spin motor quickly. Repeat of the slow movement code, except the delays are lower, increasing the speed\n    for(int x = 0; x &lt; steps_per_revolution; x++){\n        digitalWrite(STP_pin, HIGH);\n        delayMicroseconds(2000);\n        digitalWrite(STP_pin, LOW);\n        delayMicroseconds(2000);\n    }\n\n    delay(1000); // 1 second delay, no movement\n\n} // End of Main loop\n</code></pre> <p> Go Back To Introduction</p> <p>Go Next To Libraries </p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/libraries/","title":"Libraries","text":"<p> Go Back To Quick Start</p> <p>Go Next To Microstepping </p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/libraries/#stepper-motor-library","title":"Stepper Motor Library","text":"<p>For more complex stepper motor control, you would want to consider using a stepper motor library. A common stepper motor library is the AccelStepper library.</p> <p>Benefits of AccelStepper include:</p> <ul> <li>Motor acceleration and deceleration capabilities</li> <li>Multiple stepper motor control</li> <li>Well documented library with examples</li> </ul> <p>We will be reviewing two examples that use this library:</p> <ol> <li>Acceleration and Deceleration of a stepper motor</li> <li>Multi-Stepper control</li> </ol>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/libraries/#example-1-acceleration-and-deceleration","title":"Example 1: Acceleration and Deceleration","text":"","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/libraries/#pin-connections","title":"Pin Connections","text":"<p>The pin connections for this example is identical to that of the quick start's pin connections</p> Pin connections for acceleration and deceleration example","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/libraries/#arduino-code","title":"Arduino Code","text":"<p>Copy the code below and review the comments explaining the code.</p> <p>This code should turn the motor back and forth accelerating and decellerating while doing so.</p> <pre><code>// ==========================================\n//               Libraries\n// ==========================================\n#include &lt;AccelStepper.h&gt;\n\n// ==========================================\n//               Pin Connections\n// ==========================================\nconst int DIR_pin = 2;  // direction pin = Changes the direction the stepper motor turns\nconst int STP_pin = 3;  // step pin = every time the step pin is pulsed, it turns 1 step\n\n// Accel stepper defineing motor interface type\n#define motorInterfaceType 1\n\n// Creates a stepper motor object in the code\nAccelStepper stepper_OBJ(motorInterfaceType, STP_pin, DIR_pin);\n\n// ==========================================\n//               SETUP CODE\n// ==========================================\nvoid setup() {\n    stepper_OBJ.setMaxSpeed(100);  // Sets max speed of the motor in steps per second\n    stepper_OBJ.setAcceleration(25);  // Sets accerlation in steps per second, per second\n    stepper_OBJ.setSpeed(100);  // Sets the desired speed in steps per second\n    stepper_OBJ.moveTo(200);  // Sets the target position of the motor in steps\n} // End of setup code\n\n// ==========================================\n//               MAIN LOOP CODE\n// ==========================================\nvoid loop() {\n    // If the stepper motor is at the target positio, the position is changed to the opposite direction\n    if (stepper_OBJ.distanceToGo() == 0) \n        stepper_OBJ.moveTo(-stepper_OBJ.currentPosition());\n\n    // run() polls stepper_OBJ to see if the motor should be ran or not. Call run() as frequently as possible.\n    stepper_OBJ.run();\n} // End of main loop\n</code></pre>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/libraries/#example-2-multi-stepper-control","title":"Example 2: Multi-Stepper Control","text":"","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/libraries/#pin-connections_1","title":"Pin Connections","text":"<p>For this example, you will need two stepper motors and two DRV8825 motor drivers. Put both drivers on the breakout board and set the current limit before using.</p> Multistepper pin connection setup","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/libraries/#arduino-code_1","title":"Arduino Code","text":"<p>Copy the code below and review the comments explaining the code.</p> <p>The code below should turn the motors at the same time at different speeds to different positions. Unlike the first example, the stepper motors don't accelerate or decelerate. Speed remains constant.</p> <pre><code>// ==========================================\n//               Libraries\n// ==========================================\n#include &lt;AccelStepper.h&gt;\n#include &lt;MultiStepper.h&gt;\n\n// ==========================================\n//               Pin Connections\n// ==========================================\nconst int DIR_B_pin = 2;  // direction pin = Changes the direction the stepper motor turns\nconst int STP_B_pin = 3;  // step pin = every time the step pin is pulsed, it turns 1 step\n\nconst int DIR_A_pin = 4;\nconst int STP_A_pin = 5;\n\n// Accel stepper defineing motor interface type\n#define motorInterfaceType 1\n\n// Creates a stepper motor object in the code\nAccelStepper stepper_A_OBJ(motorInterfaceType, STP_A_pin, DIR_A_pin);\nAccelStepper stepper_B_OBJ(motorInterfaceType, STP_B_pin, DIR_B_pin);\n\n// Create multistepper object\nMultiStepper stepper_group;\n\n// ==========================================\n//               SETUP CODE\n// ==========================================\nvoid setup() {\n    // Configure each stepper\n  stepper_A_OBJ.setMaxSpeed(500);  // Sets max speed of the motor to 1000.0 steps per second\n  stepper_B_OBJ.setMaxSpeed(250);\n\n  // Add stepper A and B to the stepper_group object\n  stepper_group.addStepper(stepper_A_OBJ);\n  stepper_group.addStepper(stepper_B_OBJ);\n} // End of setup code\n\n// ==========================================\n//               MAIN LOOP CODE\n// ==========================================\nvoid loop() {\n    // Empty array that will contain target steps to return\n  long target_position[2];\n\n  // Sets postions\n  target_position[0] = 400;\n  target_position[1] = 200;\n\n  // Set the target positions to the stepper group\n  stepper_group.moveTo(target_position);\n\n  // Runs all stepper motors until they reach their desired position.\n  // This function blocks the code until complete\n  stepper_group.runSpeedToPosition();\n\n  delay(1000); // 1 second delay\n\n  // Repeat of the previous code with different target positions\n  target_position[0] = -600;\n  target_position[1] = 300;\n  stepper_group.moveTo(target_position);\n  stepper_group.runSpeedToPosition();\n  delay(1000);\n\n} // End of main loop\n</code></pre>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/libraries/#conclusion","title":"Conclusion","text":"<p>The previous examples demonstrate some of the capabilities of the AccelStepper library. I encourage you too look at additional examples in the AccelStepper library for additional examples.</p> <p> Go Back To Quick Start</p> <p>Go Next To Microstepping </p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/microstepping/","title":"Microstepping","text":"<p> Go Back To Libraries</p> <p>Go Next To Cloning Inputs </p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/microstepping/#microstepping","title":"Microstepping","text":"<p>Microstepping is a technique used in stepper motor control to achieve higher resolution and smoother motion. Stepper motors move in discrete steps, typically 1.8 degrees per step, or 200 steps per full rotation. Microstepping divides each full step into smaller increments, allowing more precise momements.</p> <p>If a motor has 200 steps per full rotation at full step, the motor whould have 400 steps per full rotation if it was half-stepped. The 1.8 degree per step rotation would become 0.9 degrees per step.</p> <p>Advantages of microstepping include:</p> <ul> <li>Increased resolution</li> <li>Smooth motion from the motor taking smaller steps reduces vibration and noise</li> <li>Quiter motion from less vibration and the smoother motion</li> </ul> <p>The main disadvanatage of microstepping is that it would reduce the torque, making it difficult for the motor to move larger loads.</p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/microstepping/#configurating-microstepping","title":"Configurating Microstepping","text":"<p>The microstepping is configurated on the breakout board by the selector switches <code>MO</code>, <code>M1</code> and <code>M2</code>. </p> Microstep selector switches <p>Different combinations of these switches being ON sets the microstep resolution.</p> Microstep Resolution M0 M1 M2 Ref. Steps/Revolution Full Step - - - 200 Half Step On - - 400 1/4 Step - On - 800 1/8 Step On On - 1600 1/16 Step - - On 3200 1/32 Step On - On 6400 1/32 Step - On On 6400 1/32 Step On On On 6400 <p>Warning</p> <p>Current limiting should be performed on the driver in full-step configuration</p>","tags":["DRV8825"]},{"location":"DRV8825%20Breakout%20Board/microstepping/#example","title":"Example","text":"<p>Testing the microstepping configurations is straight forward. Copy the code and setup from the quick-start example and configure what switches are in the <code>ON</code> position from the table above. Start at <code>full-step</code> configuration and work your way down to the <code>1/32</code> step resolution.</p> <p>Change the steps per revolution in the quick-start code as you increase the resolution.</p> <p> Go Back To Quick Start</p> <p>Go Next To Cloning Inputs </p>","tags":["DRV8825"]},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#drv8825","title":"DRV8825","text":"<ul> <li>Cloning Inputs</li> <li>Introduction</li> <li>Quick Start</li> <li>Libraries</li> <li>Microstepping</li> </ul>"},{"location":"tags/#store","title":"Store","text":"<ul> <li>Store</li> </ul>"},{"location":"tags/#tindie","title":"Tindie","text":"<ul> <li>Store</li> </ul>"},{"location":"tags/#home","title":"home","text":"<ul> <li>Home</li> </ul>"}]}